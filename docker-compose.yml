version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - microservices-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI (optional, for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservices-network

  # Redis (for caching, if needed)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: services/inventory/Dockerfile
    container_name: inventory-service
    depends_on:
      - postgres
      - kafka
    ports:
      - "5001:5001"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FLASK_ENV: production
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    restart: unless-stopped

  # Orders Service
  orders-service:
    build:
      context: .
      dockerfile: services/orders/Dockerfile
    container_name: orders-service
    depends_on:
      - postgres
      - kafka
    ports:
      - "5002:5002"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FLASK_ENV: production
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    restart: unless-stopped

  # Monitor Service
  monitor-service:
    build:
      context: .
      dockerfile: services/monitor/Dockerfile
    container_name: monitor-service
    depends_on:
      - inventory-service
      - orders-service
      - kafka
    ports:
      - "5003:5003"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      INVENTORY_SERVICE_URL: http://inventory-service:5001/health
      ORDERS_SERVICE_URL: http://orders-service:5002/health
      POSTGRES_URL: http://postgres:5432
      KAFKA_URL: http://kafka:29092
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    restart: unless-stopped

  # Nginx (Load Balancer/API Gateway)
  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - inventory-service
      - orders-service
      - monitor-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/html:/usr/share/nginx/html
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
